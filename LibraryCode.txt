Library Code
CONTENTS
	Linking Libraries with The User Code
		Linking C Libraries
	Compiling Libraries in with XBasic
	Using XBasic Source Files Directly

<h1>Linking Libraries with the User Code
	As well as using the PDE for compiling XBasic code, the user can maintain
	and use assembler source libraries. To create an assembler library in 
	XBasic, use the PDE then the Run/Assembler Run/Library menu options.
	For the functions which you wish to export from the library, create a
	.dec file in the same directory, this includes lines of text like:
		EXTERNAL FUNCTION MyLibFunction(myInt, myString$)
	Constants can also be exported
		$$MY_CONSTANT = 55

	In the main XBasic program Prolog include the names of the library functions 
	to be used
		EXTERNAL FUNCTION MyLibFunction(myInt, myString$)
	Compile the program with the menu options Run/Assembler Run/Make Standalone
	This will report an error for the missing libraries, but it also generates
	a .mak file for the program, so that we can build it using make.
	Modify the .mak file as follows:
	After the line
		APP = MyProg
	Add the line
		MYLIB = MyLibProg
	Modify the line
		$(CC) $(CFLAGS) $(APP).o $(LIBS) $(STDLIBS) -o $(APP)
	To:
		$(CC) $(CFLAGS) $(APP).o $(MYLIB).s $(LIBS) $(STDLIBS) -o $(APP)

	Make the program by using
		make -f MyProg.mak

<h2>Linking C Libraries
	Similarly if we have a C Library, we create a .dec file for the exported
	functions, but this time we use the term CFUNCTION, ie:
		EXTERNAL CFUNCTION MyCLibFunction(message$)

	Again we compile the C program to 32 bit assembly language using
		gcc -S -m32 -fverbose-asm MyCLib.c

	Then include the reference to the assembly code in the .mak file, ie:
		MYCLIB = MyCLib

		$(CC) $(CFLAGS) $(APP).o $(MYLIB).s $(MYCLIB).s $(LIBS) $(STDLIBS) -o $(APP)


	The downside of this approach is that you have to test the program without
	the PDE. But if you have other language assembler libraries then this approach
	is available.

<h1>Compiling Libraries in with XBasic
	The advantage of this approach is that it enables us to test our code in the PDE
	assuming that ALL of the library functions are working.

	Here we use the downloaded version of XBasic, not the installed version in usr/xb.
	We can put our XBasic or C library in say the src/shared directory of the downloaded
	XBasic.
	For XBasic we can then use the Run/Assembler Run/Library menu options. Then
	create a .dec file as explained in the previous section.

	We then modify src/Makefile to include the library, ie: in the section OBJS =
	we can add 
		shared/MyLib.s /

	We then remake XBasic as we did initially from the terminal by using
		make
		sudo make install

	Now, when we use the library in the PDE, we need to declare the library functions
	in the Prolog as:
		EXTERNAL FUNCTION MyLibFunction()

	We can then use these functions in our program and still test and debug from the
	PDE.
	The disadvantage of this approach is that you have to set-up for your libraries again
	when you have a new version of XBasic available. Although it has to be admitted that
	this eventuality is not likely to arise for quite a long time now (as at 11/Jul/22).

<h1>Using XBasic Source Files Directly
	This approach requires more management but has the advantage of allowing for testing/
	adaptation of the library code in with the user's code. The other disadvantage is
	"cluttering" of the function list viewer in the PDE. This would be dependent on the
	length of your code and that of the library.

	The PDE provides the facility View/Load Function to allow for the use of individual 
	functions held in a repository for example, furthermore the PDE provides the option
	View/Import Function From *.x, which allows you to import functions from an XBasic
	source file.

	However, when you have a library of inter-related functions it is better to use an
	approach like that adopted in XBSourceLib available on GitHub (xbwlteam), in which
	the library function names each begin with a code such as "Ary" or "Msc". This 
	allows the functions to be merged by a utility and keeps them grouped together
	in the PDE function viewer.

